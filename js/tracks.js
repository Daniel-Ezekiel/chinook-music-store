import { defaultAlbum } from "./default-album.js"; // Getting the default album to populate the form with tracks

// counter to track the addition of more tracks
let counter = document.querySelectorAll(
  "div.form_control.track_control"
).length;

// selecting the add track button
const btn_addTrack = document.querySelector(".btn_add-track");
// selecting the populate form button
const btn_populateForm = document.querySelector(".btn_populate");
// selecting all the remove field buttons generated by the php script
const btns_removeTrackField = document.querySelectorAll(
  "button.btn_remove-track"
);

// Handler function to remove a track field from the form
function removeTrackField(e) {
  e.preventDefault();
  --counter;

  //   Get the form element for removal and its trackNumber to update other form control details after removal
  const selectedFormControl = e.target.closest(".form_control");
  const selectedFormControlTrackNumber = Number(
    selectedFormControl.dataset.trackNumber
  );
  const allTrackFieldControls = document.querySelectorAll(
    ".form_control.track_control"
  );
  const trackFieldControlsArray =
    allTrackFieldControls.length && Array.from(allTrackFieldControls);
  const filteredTrackFieldControlsArray = trackFieldControlsArray.filter(
    (el) => Number(el.dataset.trackNumber) > selectedFormControlTrackNumber
  );

  //   Updating the content of the remaining form/track control elements before removing the selected form/track control element
  filteredTrackFieldControlsArray.forEach((el, i) => {
    const trackLabel = `track-${selectedFormControlTrackNumber + i}`;
    el.setAttribute("data-track-number", selectedFormControlTrackNumber + i);
    el.querySelector("label").setAttribute("for", trackLabel);
    el.querySelector("label").textContent = `${trackLabel
      .split("-")
      .join(" ")}*`;

    Number(el.querySelector("input").getAttribute("name")) ||
      el.querySelector("input").setAttribute("name", trackLabel);
    el.querySelector("input").setAttribute("id", trackLabel);
    el.querySelector("input").setAttribute(
      "placeholder",
      `Enter the name for ${trackLabel.split("-").join(" ")} in the album`
    );
  });

  //   remove selected form/track control element
  selectedFormControl.remove();
}

// Handler function to add a new track field to the form
function addNewTrackField(e, counter) {
  const trackName = `track-${counter}`;
  const div_formControl = document.createElement("div");
  div_formControl.classList.add("form_control", "track_control");
  div_formControl.setAttribute("data-track-number", counter);

  const label = document.createElement("label");
  label.setAttribute("for", trackName);
  label.textContent = trackName.split("-").join(" ") + "*";

  const input = document.createElement("input");
  input.setAttribute("type", "text");
  input.setAttribute("name", trackName);
  input.setAttribute("id", trackName);
  input.setAttribute(
    "placeholder",
    `Enter the name for ${label.textContent.slice(0, -1)} in the album`
  );
  input.setAttribute("required", true);

  const btn_removeTrack = document.createElement("button");
  btn_removeTrack.setAttribute("type", "button");
  btn_removeTrack.classList.add("btn_remove-track");
  btn_removeTrack.addEventListener("click", removeTrackField);

  const img_closeCircle = document.createElement("img");
  img_closeCircle.setAttribute("src", "./img/icons/close-circle.svg");
  img_closeCircle.setAttribute("alt", "icon");

  btn_removeTrack.appendChild(img_closeCircle);
  div_formControl.appendChild(label);
  div_formControl.appendChild(input);
  div_formControl.appendChild(btn_removeTrack);

  const formElement = e.target.parentNode.parentNode;
  const div_btnControl = e.target.parentNode;
  formElement.insertBefore(div_formControl, div_btnControl);
}

// Handler function to populate the form with the default album details
function populateForm(e) {
  e.preventDefault();

  // Remove all existing track fields except the first one
  const allTrackFields = document.querySelectorAll(
    "div.form_control.track_control"
  );

  allTrackFields.forEach((trackField, index) => {
    index !== 0 && trackField.remove();
  });

  const allTracks = defaultAlbum.tracks;
  const tracks = allTracks.slice(1);

  document.querySelector("input#album-title").value = defaultAlbum.albumTitle;
  document.querySelector("input#artist-name").value = defaultAlbum.artistName;
  document.querySelector("input#track-1").value = allTracks[0].title;

  tracks.forEach((track) => {
    addNewTrackField(e, track.id);
    document.querySelector(`input#track-${track.id}`).value = track.title;
  });
  counter = ++tracks.length;
}

// Event listeners for each remove track button
btns_removeTrackField.forEach((btn) => {
  btn.addEventListener("click", removeTrackField);
});

// Event listener to add a new track field to form
btn_addTrack.addEventListener("click", (e) => {
  e.preventDefault();
  ++counter;
  addNewTrackField(e, counter);
});

// Event listener to populate form with default values
btn_populateForm.addEventListener("click", populateForm);
